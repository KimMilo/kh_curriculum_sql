/*
 * FUNCION 객체
 * 		- PL/SQL 구문을 사용하여 생성할 수 있는 객체
 * 		- 프로시져와 유사하며, 일반 프로그래밍 언어의 함수와 같이 값을 리턴(반환) 한다.
 * 		- FUNCTION 은 PROCEDURE 과는 다르게 SQL 구문에 같이 사용할 수 있다.
 */ 

CREATE OR REPLACE FUNCTION FUNC_SAMPLE1(
	   NUM1 NUMBER
	 , NUM2 NUMBER
) RETURN NUMBER 
IS
BEGIN
	DBMS_OUTPUT.PUT_LINE('함수가 실행됩니다.!!!');
	RETURN NUM1 + NUM2;
END;

SELECT * FROM USER_ERRORS;

/* 실행 구문 
 * Results 에 RETURN 값 조회되며, Output에 FUNCTION OUTPUT 넣은거 출력됨.
 */
SELECT FUNC_SAMPLE1(10, 20) FROM DUAL;

CREATE OR REPLACE FUNCTION FUNC_SAMPLE2(
	   SALARY NUMBER 
	 , COMMISSION NUMBER 
)RETURN NUMBER 
IS 
BEGIN 
	RETURN FLOOR(SALARY * (1 + NVL(COMMISSION, 0)));
END;

SELECT EMPLOYEE_ID
	 , FUNC_SAMPLE2(SALARY, COMMISSION_PCT)
  FROM EMPLOYEES;
 
CREATE OR REPLACE FUNCTION FUNC_SAMPLE3(
	   F_JOB_ID VARCHAR2
)RETURN VARCHAR2
IS 
	/* TITLE VARCHAR2(35); */ 
	TITLE VARCHAR2(30); /* : PR_REP 가 영문 31글자라서 덜나옴 */
BEGIN 
	SELECT JOB_TITLE INTO TITLE FROM JOBS WHERE JOB_ID = F_JOB_ID;
	RETURN TITLE;
EXCEPTION
	WHEN OTHERS THEN /* Results 에 전체 값 조회가 안될 경우 Output에 ERROR 메시지 출력 */
		DBMS_OUTPUT.PUT_LINE('ERROR : F_JOB_ID=' || F_JOB_ID);
		DBMS_OUTPUT.PUT_LINE('SQL ERROR CODE:' || SQLCODE); /* 에러코드 */
		DBMS_OUTPUT.PUT_LINE('SQL ERROR MESSAGE:' || SQLERRM); /* 에러사유 */
END;

SELECT * FROM USER_ERRORS;

SELECT EMPLOYEE_ID
	 , JOB_ID
	 , FUNC_SAMPLE3(JOB_ID)
  FROM EMPLOYEES;

/* RAISE_APPLICATION_ERROR : 사용자 에러코드 및 에러메시지 작성 
 * (-20000 ~ -20999 범위)
 */
CREATE OR REPLACE PROCEDURE ch10_raise_test_proc ( p_num NUMBER)
IS
BEGIN
	IF p_num <= 0 THEN
      RAISE_APPLICATION_ERROR (-20000, '양수만 입력받을 수 있단 말입니다!');
  	END IF;
      DBMS_OUTPUT.PUT_LINE(p_num);
EXCEPTION
    WHEN INVALID_NUMBER THEN
      DBMS_OUTPUT.PUT_LINE('양수만 입력받을 수 있습니다');
    WHEN OTHERS THEN
      DBMS_OUTPUT.PUT_LINE(SQLCODE);
      DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;

BEGIN
	ch10_raise_test_proc(-20);
END;